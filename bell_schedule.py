# -*- coding: utf-8 -*-
"""Bell Schedule.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kz1FrBwCkBRgG_bTBRDIQQgA_lTHBKgX
"""

import datetime

from flask import Flask, render_template, request

app = Flask(__name__)

# Your create_bell_schedule function goes here

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate', methods=['POST'])
def generate_schedule():
    start_time = request.form['start_time']
    # Retrieve other form inputs here

    # Call create_bell_schedule function with the input parameters
    schedule = create_bell_schedule(start_time, end_time, num_periods, transition_time, lunch_period, lunch_length, intervention_period, intervention_length)

    return render_template('index.html', schedule=schedule)

if __name__ == '__main__':
    app.run(debug=True)


# This function takes in parameters around school bell schedules
def create_bell_schedule(start_time, end_time, num_periods, transition_time, lunch_period, lunch_length, intervention_period=None, intervention_length=0):
    """
    Generates a bell schedule based on input parameters.

    Parameters:
    start_time (str): School day start time in HH:MM format.
    end_time (str): School day end time in HH:MM format.
    num_periods (int): Number of class periods.
    transition_time (int): Time for transitions between classes in minutes.
    lunch_period (int): The period number during which lunch is served.
    lunch_length (int): Duration of lunch in minutes.
    intervention_period (int, optional): Period number after which the intervention is added.
    intervention_length (int, optional): Duration of the intervention in minutes.
    """

    # Convert start and end time to datetime objects
    start = datetime.datetime.strptime(start_time, '%H:%M')
    end = datetime.datetime.strptime(end_time, '%H:%M')

    # Calculate total school day duration in minutes
    total_duration = (end - start).seconds // 60

    # Calculate duration for each class period excluding transitions
    total_transition_time = (num_periods - 1) * transition_time
    total_class_time = total_duration - total_transition_time - lunch_length - intervention_length
    period_duration = total_class_time // num_periods

    # Generate the bell schedule
    current_time = start
    schedule = []

    for period in range(1, num_periods + 1):
        # Start of the period
        start_period = current_time.strftime('%H:%M')

        # Adjust for lunch period
        if period == lunch_period:
            current_time += datetime.timedelta(minutes=period_duration + lunch_length)
            period_label = f"Period {period}/Lunch"
        else:
            current_time += datetime.timedelta(minutes=period_duration)
            period_label = f"Period {period}"

        # End of the period
        end_period = current_time.strftime('%H:%M')

        # Add the period to the schedule
        schedule.append(f"{period_label}: {start_period} - {end_period}")

        # If this is the period before the intervention, add the intervention
        if intervention_period and period == intervention_period:
            start_intervention = current_time.strftime('%H:%M')
            current_time += datetime.timedelta(minutes=intervention_length)
            end_intervention = current_time.strftime('%H:%M')
            schedule.append(f"Intervention: {start_intervention} - {end_intervention}")

        # Transition time
        current_time += datetime.timedelta(minutes=transition_time)

    return schedule

# Example usage - Taking inputs from the user
start_time = input("Enter school day start time (HH:MM): ")
end_time = input("Enter school day end time (HH:MM): ")
num_periods = int(input("Enter the number of class periods: "))
transition_time = int(input("Enter the time for transitions between classes in minutes: "))
lunch_period = int(input("Enter the period number during which lunch is served: "))
lunch_length = int(input("Enter the duration of lunch in minutes: "))

# Intervention period input
add_intervention = input("Would you like to add an intervention period? (yes/no): ").lower()
intervention_period = None
intervention_length = 0

if add_intervention == 'yes':
    intervention_period = int(input("Enter the period number after which the intervention should be added: "))
    intervention_length = int(input("Enter the duration of the intervention in minutes: "))

bell_schedule = create_bell_schedule(start_time, end_time, num_periods, transition_time, lunch_period, lunch_length, intervention_period, intervention_length)
for period in bell_schedule:
    print(period)